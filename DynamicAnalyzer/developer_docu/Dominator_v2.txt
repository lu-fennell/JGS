================================================
=
=   Tutorial about Dominators and Control Flow
=   revised version of Dominator.txt by koenigr
= 
================================================



1) Definition of Dominator and Postdominator
================================================

A statement d dominates a statement t if every path going to t has to go trough d.                             
A statement p postdominates a statement t if every path starting at t has to go through p.

See https://en.wikipedia.org/wiki/Dominator_(graph_theory) 


Examples:



                 (stmt) -------->(stmt)
                  /                 \
                 /                   \
                /                     \
---------> (ifStmt t) ------------> (stmt p)------> (stmt)
          			           p is postdominator of t
          


                 (stmt) -------->(stmt)
                  /                 \
                 /                   \
                /                     \
---------> (ifStmt d) ------------> (stmt t)------> (stmt)
            d is dominator of t



2) Dominators in the Source-Code: List of possibly interesting files
====================================================================

- MHGDominatorsFinder<N> (DirectedGraph<N> graph)
- MHGPostDominatorsFinder(DirectedGraph<N< graph)
- MHGPostDominatorsFinder.getDominators
- MHGPostDominatorsFinder.getImmediateDominator
- postdominatorfinder.getDominators(stmt).contains(s)
- UnitGraph graph = new BriefUnitGraph(body)
- soot.toolkits.graph.UnitGraph+
- soot.toolkits.graph.BriefUnitGraph.
- BriefUnitGraph(Body body)



3) Control flow in Java vs Jimple
======================================================

Consider the following java code, where b0, b1, ... etc are boolean
expressions like x < 3 or y > 0 and stm0, stm1, ... are statements like
x = 4, y = x + 7.

if (b0) {
	stm0
} else if (b1) {
	stm1
} else {
	stm2
}

This is translated to the following Jimple Code:

	if !b0 goto label0
	stm0
	goto label2
  
  label 0:
    if !b1 goto label1
    stm1
    goto label2
  
  label1:
    stm2
  
  label2:
    ... 


4) Multiple IFs vs Seperated IFs
=======================================================

 There can be two kinds of "several IFs": Multiple Ifs (if, else if, else)
 and seperated ifs:

 MULTIPLE IF:
                     
              /-----(if)------\
             /                 \
 -----(ifStmt)----(else if)----( )------ 
             \                 / 
              \-----(else)----/



SEPARATED IFS:

----(ifStmt)--------------()----(ifStmt)---------()------
          \              /          \           /
           \----------- /            \---------/


4.1) Multiple IFS and Seperated IFs in Jimple:
======================================================
A multiple-If looks like this in Jimple (compare Section3, the Jimpelised If/IfElse/Else)

             								actions of else-clause							
 ---(!b0)----true--->(!b1)----true------------>(stm2)-------------->(label2)----->
 	  \					\                                              / /
 	   \				 \         actions of else-if-clause          / /
 	    \				  \------------------->(stm1)----------------/ /
       	 \                                                            /
       	  \                        actions of if-clause              /
           \---------------------------------->(stm01)--------------/



5) Open Questions
======================================================


5.1) If one if-clause creates a high context... is it necessary that the other clauses are high too?
-----------------------------------------------------------------------------------------------------



 if (...) {
   ...LOW...
 } else if (...) {
   ...HIGH...
 } else if (...) {
   ...LOW...    //!! IF this clause is active it means that the condition of the high clause was false
 } else {
   ???          //!!
 }        
 
5.2) What to do with big if-expressions, which are split in Jimple?
-----------------------------------------------------------------------
consider the following if statement:

 	if (n == 1 && m > 0 && b < 0) { ... }

jimplified, this becomes:
 	if i0 != 1 goto label0;
    ...
    if i1 <= 0 goto label0;
    ...
    if i2 >= 0 goto label0;
    ...

PROBLEM: In jimple code, we cannot determine if this was just one 
	big if statement (like above), or if these were several if stmts! (right? does it even matter??)
 
 SOLUTION
 => set lpc before ifStmt
 
 1. As soon as an ifStmt is recognized by AnnotationStmtSwitch, JimpleInjector adds a
 	"HandleStmt.checkCondition(String domHash, String... args"-stmt BEFORE the IfStmt.
 	-- HandleStmt.checkCondition joins the locals with the previous localPC and adds it
 		together with the domHashValue as LPCDominatorPair to a list in LocalMap.

 2. In the same JimpleInjector Method, the DominatorFinder computes the immediate
 	dominator for this Stmt. The dominatorFinder stores the unit in an internal list for later
 	analysis and returns the hashvalue of the dominator. The hashvalue is needed as an
 	argument for checkcondition and will be used later in the LocalMap.
 	
 3. The BodyAnalyzer checks for every unit if it is stored as a dominator. If this is the case
 	JimpleInjector invokes the HandleStmt.exitInnerScope() function where every lpc which belongs
 	to this node is deleted.













