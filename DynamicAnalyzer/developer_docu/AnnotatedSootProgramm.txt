public class testclasses.Simple extends java.lang.Object
{

    public void <init>()
    {
    	// This is the setup. It basically adds Simple to the local map, creates a new map in the Object Map to hold fields.
    
        testclasses.Simple r0;							// Create local variable for testclasses.Simple
        analyzer.level2.HandleStmt hs;						// Create local variable for the handle statement hs
        java.lang.String local_for_Strings;					// Create a local variable for strings, as temporary container
        java.lang.String[] local_for_String_Arrays;			// Same container for arrays of strings
        java.lang.Object local_for_Objects;					// Same container for objects

        r0 := @this: testclasses.Simple;										// The @this tag indicates what the this keyword refers to
        specialinvoke r0.<java.lang.Object: void <init>()>();						// Specialinvoke means: init constructor of Simple class
        hs = new analyzer.level2.HandleStmt;
        specialinvoke hs.<analyzer.level2.HandleStmt: void <init>()>();				// Clears the objectMap in analyzer.level2.HandleStmt,
        																			// basically resets everything. On global PC stack, there 
        																			// is now just one element: LOW
        virtualinvoke hs.<analyzer.level2.HandleStmt: void addObjectToObjectMap(java.lang.Object)>(r0);		// add Simple Object to ObjectMap
        																									// eg creates a new map which will
        																									// map simple.FIELD -> SecValue
        local_for_Strings = "testclasses.Simple_r0";
        virtualinvoke hs.<analyzer.level2.HandleStmt: void addLocal(java.lang.String)>(local_for_Strings);	// adds a the simple Class as a
        																									// Local to the one and only local
        																									// map, with default sec-value LOW
        virtualinvoke hs.<analyzer.level2.HandleStmt: void close()>();
        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r0, local_for_String_Arrays;
        java.lang.String r1, r3, local_for_Strings;
        java.lang.Object $r2, local_for_Objects;
        java.io.PrintStream $r4;
        analyzer.level2.HandleStmt hs;

			Okt 22, 2016 3:42:29 PM analyzer.level2.HandleStmt <init>
			INFORMATION: Create new HandleStmt instance
			Okt 22, 2016 3:42:30 PM analyzer.level2.HandleStmt init
			INFORMATION: Init HandleStatement

        r0 := @parameter0: java.lang.String[];
        hs = new analyzer.level2.HandleStmt;
        specialinvoke hs.<analyzer.level2.HandleStmt: void <init>()>();
        staticinvoke <analyzer.level2.HandleStmt: void init()>();
        
        	// Now: Variables are put into the local map
        	INFO: Add Local java.lang.String[]_r0 with SecurityLevel.bottom() to LocalMap
			INFO: Add Local java.lang.String_r1 with SecurityLevel.bottom() to LocalMap
			INFO: Add Local java.lang.Object_$r2 with SecurityLevel.bottom() to LocalMap
			INFO: Add Local java.lang.String_r3 with SecurityLevel.bottom() to LocalMap
			INFO: Add Local java.io.PrintStream_$r4 with SecurityLevel.bottom() to LocalMap


        local_for_Strings = "java.lang.String[]_r0";
        virtualinvoke hs.<analyzer.level2.HandleStmt: void addLocal(java.lang.String)>(local_for_Strings);
        local_for_Strings = "java.lang.String_r1";
        virtualinvoke hs.<analyzer.level2.HandleStmt: void addLocal(java.lang.String)>(local_for_Strings);
        local_for_Strings = "java.lang.Object_$r2";
        virtualinvoke hs.<analyzer.level2.HandleStmt: void addLocal(java.lang.String)>(local_for_Strings);
        local_for_Strings = "java.lang.String_r3";
        virtualinvoke hs.<analyzer.level2.HandleStmt: void addLocal(java.lang.String)>(local_for_Strings);
        local_for_Strings = "java.io.PrintStream_$r4";
        virtualinvoke hs.<analyzer.level2.HandleStmt: void addLocal(java.lang.String)>(local_for_Strings);

// -------------------------------- //
// String message = "Hello World";	//
// -------------------------------- //

   
        	// this updates the sec-value of the "Hello World" string, like so: 
        	// least Upper Bound(local Programm, sec-value of the variables) which is LOW by default
        	// setLevelOfLocal also checks if !SecurityLevel.le(lpc, level), and if yes aborts and throws exception
        	INFO: Set level of local java.lang.String_r1 to LOW
			INFO: Check if level of local java.lang.String_r1 (LOW) >= lpc (LOW)
			INFO: New level of local java.lang.String_r1 is LOW
			
        local_for_Strings = "java.lang.String_r1";
        virtualinvoke hs.<analyzer.level2.HandleStmt: java.lang.Object setLevelOfLocal(java.lang.String)>(local_for_Strings);
        
        
        
        
        	// joinLevelOfLocalAndAssignmentLevel finds out if we are in highPC or lowPC, and puts return value (LOW/HIGH, which is an object)
        	// on top of the stack?!
        	INFO: Add level LOW of local java.lang.String_r1 to assignment-level
        	
        r1 = "Hello World";
        local_for_Strings = "java.lang.String_r1";
        virtualinvoke hs.<analyzer.level2.HandleStmt: java.lang.Object joinLevelOfLocalAndAssignmentLevel(java.lang.String)>(local_for_Strings);
        
        
        
        
// -------------------------------- //
// message = MakeHigh(message) 		//
// -------------------------------- //        
        
    
        local_for_Strings = "java.lang.Object_$r2";
        virtualinvoke hs.<analyzer.level2.HandleStmt: java.lang.Object setLevelOfLocal(java.lang.String)>(local_for_Strings);
        $r2 = staticinvoke <util.analyzer.DynamicLabel: java.lang.Object makeHigh(java.lang.Object)>(r1);	//makeHigh!
        local_for_Strings = "java.lang.Object_$r2";
        virtualinvoke hs.<analyzer.level2.HandleStmt: void makeLocalHigh(java.lang.String)>(local_for_Strings);		// just updates localMap
        local_for_Strings = "java.lang.Object_$r2";
        	// find out the value of the PC, which here should still be low, and take the least upper bound, and return (should be HIGH,
        	// since variable has level HIGH)
        virtualinvoke hs.<analyzer.level2.HandleStmt: java.lang.Object joinLevelOfLocalAndAssignmentLevel(java.lang.String)>(local_for_Strings);   
        local_for_Strings = "java.lang.String_r3";
        	// probably 
        virtualinvoke hs.<analyzer.level2.HandleStmt: java.lang.Object setLevelOfLocal(java.lang.String)>(local_for_Strings);
        r3 = (java.lang.String) $r2;
        local_for_Objects = class "java/lang/System";
        local_for_Strings = "<java.lang.System: java.io.PrintStream out>";
        
        
        virtualinvoke hs.<analyzer.level2.HandleStmt: java.lang.Object addLevelOfField(java.lang.Object,java.lang.String)>(local_for_Objects, local_for_Strings);
        local_for_Strings = "java.io.PrintStream_$r4";
        virtualinvoke hs.<analyzer.level2.HandleStmt: java.lang.Object setLevelOfLocal(java.lang.String)>(local_for_Strings);
        $r4 = <java.lang.System: java.io.PrintStream out>;
        local_for_Strings = "java.lang.String_r3";
        virtualinvoke hs.<analyzer.level2.HandleStmt: void checkThatNotHigh(java.lang.String)>(local_for_Strings);
        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>(r3);
        virtualinvoke hs.<analyzer.level2.HandleStmt: void close()>();
        return;
    }
}
